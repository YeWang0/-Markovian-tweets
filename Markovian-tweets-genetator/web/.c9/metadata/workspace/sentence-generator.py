{"filter":false,"title":"sentence-generator.py","tooltip":"/sentence-generator.py","undoManager":{"mark":69,"position":69,"stack":[[{"start":{"row":0,"column":0},"end":{"row":138,"column":10},"action":"insert","lines":["","import re","import random","import sys","","# These mappings can get fairly large -- they're stored globally to","# save copying time.","","# (tuple of words) -> {dict: word -> number of times the word appears following the tuple}","# Example entry:","#    ('eyes', 'turned') => {'to': 2.0, 'from': 1.0}","# Used briefly while first constructing the normalized mapping","tempMapping = {}","","# (tuple of words) -> {dict: word -> *normalized* number of times the word appears following the tuple}","# Example entry:","#    ('eyes', 'turned') => {'to': 0.66666666, 'from': 0.33333333}","mapping = {}","","# Contains the set of words that can start sentences","starts = []","","# We want to be able to compare words independent of their capitalization.","def fixCaps(word):","    # Ex: \"FOO\" -> \"foo\"","    if word.isupper() and word != \"I\":","        word = word.lower()","        # Ex: \"LaTeX\" => \"Latex\"","    elif word [0].isupper():","        word = word.lower().capitalize()","        # Ex: \"wOOt\" -> \"woot\"","    else:","        word = word.lower()","    return word","","# Tuples can be hashed; lists can't.  We need hashable values for dict keys.","# This looks like a hack (and it is, a little) but in practice it doesn't","# affect processing time too negatively.","def toHashKey(lst):","    return tuple(lst)","","# Returns the contents of the file, split into a list of words and","# (some) punctuation.","def wordlist(filename):","    f = open(filename, 'r')","    wordlist = [fixCaps(w) for w in re.findall(r\"[\\w']+|[.,!?;]\", f.read())]","    # print wordlist","    f.close()","    return wordlist","","# Self-explanatory -- adds \"word\" to the \"tempMapping\" dict under \"history\".","# tempMapping (and mapping) both match each word to a list of possible next","# words.","# Given history = [\"the\", \"rain\", \"in\"] and word = \"Spain\", we add \"Spain\" to","# the entries for [\"the\", \"rain\", \"in\"], [\"rain\", \"in\"], and [\"in\"].","def addItemToTempMapping(history, word):","    global tempMapping","    while len(history) > 0:","        first = toHashKey(history)","        if first in tempMapping:","            if word in tempMapping[first]:","                tempMapping[first][word] += 1.0","            else:","                tempMapping[first][word] = 1.0","        else:","            tempMapping[first] = {}","            tempMapping[first][word] = 1.0","        history = history[1:]","","# Building and normalizing the mapping.","def buildMapping(wordlist, markovLength):","    global tempMapping","    starts.append(wordlist [0])","    for i in range(1, len(wordlist) - 1):","        if i <= markovLength:","            history = wordlist[: i + 1]","        else:","            history = wordlist[i - markovLength + 1 : i + 1]","        follow = wordlist[i + 1]","        # if the last elt was a period, add the next word to the start list","        if history[-1] == \".\" and follow not in \".,!?;\":","            starts.append(follow)","        addItemToTempMapping(history, follow)","    # Normalize the values in tempMapping, put them into mapping","    for first, followset in tempMapping.iteritems():","        total = sum(followset.values())","        # Normalizing here:","        mapping[first] = dict([(k, v / total) for k, v in followset.iteritems()])","    print tempMapping","","# Returns the next word in the sentence (chosen randomly),","# given the previous ones.","def next(prevList):","    sum = 0.0","    retval = \"\"","    index = random.random()","    # Shorten prevList until it's in mapping","    while toHashKey(prevList) not in mapping:","        prevList.pop(0)","    # Get a random word from the mapping, given prevList","    for k, v in mapping[toHashKey(prevList)].iteritems():","        sum += v","        if sum >= index and retval == \"\":","            retval = k","    return retval","","def genSentence(markovLength):","    # Start with a random \"starting word\"","    curr = random.choice(starts)","    sent = curr.capitalize()","    prevList = [curr]","    # Keep adding words until we hit a period","    while (curr not in \".\"):","        curr = next(prevList)","        prevList.append(curr)","        # if the prevList has gotten too long, trim it","        if len(prevList) > markovLength:","            prevList.pop(0)","        if (curr not in \".,!?;\"):","            sent += \" \" # Add spaces between words (but not punctuation)","        sent += curr","    return sent","","def main():","    # print sys.argv","    if len(sys.argv) < 2:","        sys.stderr.write('Usage: ' + sys.argv [0] + ' text_source [chain_length=1]\\n')","        sys.exit(1)","","    filename = sys.argv[1]","    markovLength = 1","    if len (sys.argv) == 3:","        markovLength = int(sys.argv [2])","","    buildMapping(wordlist(filename), markovLength)","    # print genSentence(markovLength)","    # print wordlist(filename)","if __name__ == \"__main__\":","    main()"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":17},"action":"insert","lines":["#!/usr/bin/python"],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":17},"action":"remove","lines":["#!/usr/bin/python"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":17},"action":"insert","lines":["#!/usr/bin/python"],"id":6}],[{"start":{"row":0,"column":17},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":89,"column":4},"end":{"row":89,"column":6},"action":"insert","lines":["# "],"id":8}],[{"start":{"row":136,"column":4},"end":{"row":136,"column":6},"action":"remove","lines":["# "],"id":9}],[{"start":{"row":139,"column":4},"end":{"row":139,"column":6},"action":"insert","lines":["# "],"id":15}],[{"start":{"row":139,"column":12},"end":{"row":140,"column":0},"action":"insert","lines":["",""],"id":16},{"start":{"row":140,"column":0},"end":{"row":140,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":140,"column":4},"end":{"row":140,"column":5},"action":"insert","lines":["p"],"id":17}],[{"start":{"row":140,"column":5},"end":{"row":140,"column":6},"action":"insert","lines":["r"],"id":18}],[{"start":{"row":140,"column":6},"end":{"row":140,"column":7},"action":"insert","lines":["i"],"id":19}],[{"start":{"row":140,"column":7},"end":{"row":140,"column":8},"action":"insert","lines":["n"],"id":20}],[{"start":{"row":140,"column":8},"end":{"row":140,"column":9},"action":"insert","lines":["t"],"id":21}],[{"start":{"row":140,"column":9},"end":{"row":140,"column":10},"action":"insert","lines":[" "],"id":22}],[{"start":{"row":140,"column":10},"end":{"row":140,"column":12},"action":"insert","lines":["\"\""],"id":23}],[{"start":{"row":140,"column":11},"end":{"row":140,"column":12},"action":"insert","lines":["h"],"id":24}],[{"start":{"row":140,"column":12},"end":{"row":140,"column":13},"action":"insert","lines":["e"],"id":25}],[{"start":{"row":140,"column":13},"end":{"row":140,"column":14},"action":"insert","lines":["l"],"id":26}],[{"start":{"row":140,"column":14},"end":{"row":140,"column":15},"action":"insert","lines":["l"],"id":27}],[{"start":{"row":140,"column":15},"end":{"row":140,"column":16},"action":"insert","lines":["o"],"id":28}],[{"start":{"row":139,"column":12},"end":{"row":140,"column":17},"action":"remove","lines":["","    print \"hello\""],"id":29}],[{"start":{"row":139,"column":4},"end":{"row":139,"column":6},"action":"remove","lines":["# "],"id":30}],[{"start":{"row":134,"column":0},"end":{"row":134,"column":4},"action":"insert","lines":["    "],"id":31}],[{"start":{"row":134,"column":4},"end":{"row":134,"column":22},"action":"insert","lines":["wordlist(filename)"],"id":32}],[{"start":{"row":135,"column":4},"end":{"row":135,"column":6},"action":"insert","lines":["# "],"id":33}],[{"start":{"row":136,"column":4},"end":{"row":136,"column":6},"action":"insert","lines":["# "],"id":34}],[{"start":{"row":134,"column":4},"end":{"row":134,"column":5},"action":"insert","lines":["p"],"id":35}],[{"start":{"row":134,"column":5},"end":{"row":134,"column":6},"action":"insert","lines":["r"],"id":36}],[{"start":{"row":134,"column":6},"end":{"row":134,"column":7},"action":"insert","lines":["i"],"id":37}],[{"start":{"row":134,"column":7},"end":{"row":134,"column":8},"action":"insert","lines":["n"],"id":38}],[{"start":{"row":134,"column":8},"end":{"row":134,"column":9},"action":"insert","lines":["t"],"id":39}],[{"start":{"row":134,"column":9},"end":{"row":134,"column":10},"action":"insert","lines":[" "],"id":40}],[{"start":{"row":130,"column":26},"end":{"row":131,"column":0},"action":"insert","lines":["",""],"id":41},{"start":{"row":131,"column":0},"end":{"row":131,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":131,"column":4},"end":{"row":131,"column":5},"action":"insert","lines":["p"],"id":42}],[{"start":{"row":131,"column":5},"end":{"row":131,"column":6},"action":"insert","lines":["r"],"id":43}],[{"start":{"row":131,"column":6},"end":{"row":131,"column":7},"action":"insert","lines":["i"],"id":44}],[{"start":{"row":131,"column":7},"end":{"row":131,"column":8},"action":"insert","lines":["n"],"id":45}],[{"start":{"row":131,"column":8},"end":{"row":131,"column":9},"action":"insert","lines":["t"],"id":46}],[{"start":{"row":131,"column":9},"end":{"row":131,"column":10},"action":"insert","lines":[" "],"id":47}],[{"start":{"row":131,"column":10},"end":{"row":131,"column":11},"action":"insert","lines":["f"],"id":48}],[{"start":{"row":131,"column":11},"end":{"row":131,"column":12},"action":"insert","lines":["i"],"id":49}],[{"start":{"row":131,"column":12},"end":{"row":131,"column":13},"action":"insert","lines":["l"],"id":50}],[{"start":{"row":131,"column":13},"end":{"row":131,"column":14},"action":"insert","lines":["e"],"id":51}],[{"start":{"row":131,"column":14},"end":{"row":131,"column":15},"action":"insert","lines":["n"],"id":52}],[{"start":{"row":131,"column":10},"end":{"row":131,"column":15},"action":"remove","lines":["filen"],"id":53},{"start":{"row":131,"column":10},"end":{"row":131,"column":18},"action":"insert","lines":["filename"]}],[{"start":{"row":131,"column":10},"end":{"row":131,"column":11},"action":"insert","lines":["\""],"id":54}],[{"start":{"row":131,"column":11},"end":{"row":131,"column":12},"action":"insert","lines":["\""],"id":55}],[{"start":{"row":131,"column":11},"end":{"row":131,"column":12},"action":"insert","lines":["f"],"id":56}],[{"start":{"row":131,"column":12},"end":{"row":131,"column":13},"action":"insert","lines":["i"],"id":57}],[{"start":{"row":131,"column":13},"end":{"row":131,"column":14},"action":"insert","lines":["l"],"id":58}],[{"start":{"row":131,"column":14},"end":{"row":131,"column":15},"action":"insert","lines":["e"],"id":59}],[{"start":{"row":131,"column":15},"end":{"row":131,"column":16},"action":"insert","lines":["r"],"id":60}],[{"start":{"row":131,"column":15},"end":{"row":131,"column":16},"action":"remove","lines":["r"],"id":61}],[{"start":{"row":131,"column":15},"end":{"row":131,"column":16},"action":"insert","lines":["n"],"id":62}],[{"start":{"row":131,"column":16},"end":{"row":131,"column":17},"action":"insert","lines":["a"],"id":63}],[{"start":{"row":131,"column":17},"end":{"row":131,"column":18},"action":"insert","lines":["m"],"id":64}],[{"start":{"row":131,"column":18},"end":{"row":131,"column":19},"action":"insert","lines":["e"],"id":65}],[{"start":{"row":131,"column":19},"end":{"row":131,"column":20},"action":"insert","lines":[":"],"id":66}],[{"start":{"row":131,"column":21},"end":{"row":131,"column":22},"action":"insert","lines":[" "],"id":67}],[{"start":{"row":131,"column":22},"end":{"row":131,"column":23},"action":"insert","lines":["+"],"id":68}],[{"start":{"row":131,"column":23},"end":{"row":131,"column":24},"action":"insert","lines":[" "],"id":69}],[{"start":{"row":131,"column":4},"end":{"row":131,"column":6},"action":"insert","lines":["# "],"id":70}],[{"start":{"row":135,"column":4},"end":{"row":135,"column":6},"action":"insert","lines":["# "],"id":71}],[{"start":{"row":135,"column":0},"end":{"row":135,"column":30},"action":"remove","lines":["    # print wordlist(filename)"],"id":72}],[{"start":{"row":134,"column":40},"end":{"row":135,"column":0},"action":"remove","lines":["",""],"id":73}],[{"start":{"row":135,"column":4},"end":{"row":135,"column":6},"action":"remove","lines":["# "],"id":74}],[{"start":{"row":136,"column":4},"end":{"row":136,"column":6},"action":"remove","lines":["# "],"id":75}]]},"ace":{"folds":[],"scrolltop":2234.5,"scrollleft":0,"selection":{"start":{"row":136,"column":35},"end":{"row":136,"column":35},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":110,"state":"start","mode":"ace/mode/python"}},"timestamp":1474741448815,"hash":"5b8fbceeaef03e932ea5c788e717eed64103197e"}